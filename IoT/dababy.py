from PCA9685 import PCA9685
import time
import cv2
import numpy as np
Dir = [
    'forward',
    'backward',
]
pwm = PCA9685(0x40, debug=True)
pwm.setPWMFreq(50)
class MotorDriver():
    def __init__(self):
        self.PWMA = 0
        self.AIN1 = 1
        self.AIN2 = 2
        self.PWMB = 5
        self.BIN1 = 3
        
        self.BIN2 = 4

    def MotorRun(self, motor, index, speed):
        if speed > 100:
            return
        if(motor == 0):
            pwm.setDutycycle(self.PWMA, speed)
            if(index == Dir[0]):
                pwm.setLevel(self.AIN1, 0)
                pwm.setLevel(self.AIN2, 1) 
            else:
                pwm.setLevel(self.AIN1, 1)
                pwm.setLevel(self.AIN2, 0)
        else:
            pwm.setDutycycle(self.PWMB, speed)
            if(index == Dir[0]):
                pwm.setLevel(self.BIN1, 0)
                pwm.setLevel(self.BIN2, 1)
            else:
                pwm.setLevel(self.BIN1, 1)
                pwm.setLevel(self.BIN2, 0)

    def MotorStop(self, motor):
        if (motor == 0):
            pwm.setDutycycle(self.PWMA, 0)
        else:
            pwm.setDutycycle(self.PWMB, 0)


try:
    Motor = MotorDriver()
    Motor = MotorDriver()
    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

    start_time_1 = time.time()

    # ÏãúÎÇòÎ¶¨Ïò§1 : 150m Ïù¥Îèô
    print("üöÄ Start Î™ÖÎ†π Ïã§Ìñâ")
    while ( cap.isOpened() ):
        ret, frame = cap.read()
        cv2.imshow(frame)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (5,5), 0)
        ret, thresh1 = cv2.threshold(blur, 123, 255, cv2.THRESH_BINARY)

        mask = cv2.erode(thresh1, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)
        cv2.imshow('mask',mask)

        contours,hierarchy = cv2.findContours(mask.copy(), 1, cv2.CHAIN_APPROX_NONE)

        if len(contours) > 0:
            c = max(contours, key=cv2.contourArea)
            M = cv2.moments(c)

            cx = int(M['m10']/M['m00'])
            cy = int(M['m01']/M['m00'])

            print(cx)

            if cx > frame.shape[1]:
                Motor.MotorRun(0, 'forward', 45)
                Motor.MotorRun(1, 'forward', 50)
            
            elif cx < frame.shape[1]:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 45)
            
            else:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 50)
            
            if time.time() - start_time_1 > 10:
                break

     

        print("üõë Stop Î™ÖÎ†π Ïã§Ìñâ")
        Motor.MotorStop(0)
        Motor.MotorStop(1)

        time.sleep(3)

    # ÏãúÎÇòÎ¶¨Ïò§ 2 : Ïò§Î•∏Ï™Ω ÌöåÏ†Ñ
    print("‚û°Ô∏è Turn Right Ïã§Ìñâ")
    Motor.MotorRun(0, 'forward', 50)
    Motor.MotorRun(1, 'backward', 50)

    time.sleep(1.5)

    print("üõë Stop Î™ÖÎ†π Ïã§Ìñâ")
    Motor.MotorStop(0)
    Motor.MotorStop(1)

    time.sleep(3)

    start_time_2 = time.time()

    # ÏãúÎÇòÎ¶¨Ïò§ 3 : 150m Ïù¥Îèô
    print("üöÄ Start Î™ÖÎ†π Ïã§Ìñâ")
    while ( cap.isOpened() ):
        ret, frame = cap.read()
        cv2.imshow(frame)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (5,5), 0)
        ret, thresh1 = cv2.threshold(blur, 123, 255, cv2.THRESH_BINARY)

        mask = cv2.erode(thresh1, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)
        cv2.imshow('mask',mask)

        contours,hierarchy = cv2.findContours(mask.copy(), 1, cv2.CHAIN_APPROX_NONE)

        if len(contours) > 0:
            c = max(contours, key=cv2.contourArea)
            M = cv2.moments(c)

            cx = int(M['m10']/M['m00'])
            cy = int(M['m01']/M['m00'])

            print(cx)

            if cx > frame.shape[1]:
                Motor.MotorRun(0, 'forward', 45)
                Motor.MotorRun(1, 'forward', 50)
            
            elif cx < frame.shape[1]:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 45)
            
            else:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 50)
            
            if time.time() - start_time_2 > 10:
                break

    print("üõë Stop Î™ÖÎ†π Ïã§Ìñâ")
    Motor.MotorStop(0)
    Motor.MotorStop(1)

    time.sleep(3)


    # ÏãúÎÇòÎ¶¨Ïò§ 4 : ÏôºÏ™ΩÏúºÎ°ú ÌöåÏ†Ñ
    print("‚¨ÖÔ∏è Turn Left Ïã§Ìñâ")
    Motor.MotorRun(0, 'backward', 50)
    Motor.MotorRun(1, 'forward', 50)

    time.sleep(1.5)

    print("üõë Stop Î™ÖÎ†π Ïã§Ìñâ")
    Motor.MotorStop(0)
    Motor.MotorStop(1)

    time.sleep(3)

    start_time_3 = time.time()

    # ÏãúÎÇòÎ¶¨Ïò§ 5 : 50cm Ïù¥Îèô
    print("üöÄ Start Î™ÖÎ†π Ïã§Ìñâ")
    while ( cap.isOpened() ):
        ret, frame = cap.read()
        cv2.imshow(frame)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (5,5), 0)
        ret, thresh1 = cv2.threshold(blur, 123, 255, cv2.THRESH_BINARY)

        mask = cv2.erode(thresh1, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)
        cv2.imshow('mask',mask)

        contours,hierarchy = cv2.findContours(mask.copy(), 1, cv2.CHAIN_APPROX_NONE)

        if len(contours) > 0:
            c = max(contours, key=cv2.contourArea)
            M = cv2.moments(c)

            cx = int(M['m10']/M['m00'])
            cy = int(M['m01']/M['m00'])

            print(cx)

            if cx > frame.shape[1]:
                Motor.MotorRun(0, 'forward', 45)
                Motor.MotorRun(1, 'forward', 50)
            
            elif cx < frame.shape[1]:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 45)
            
            else:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 50)
            
            if time.time() - start_time_3 > 3:
                break

    print("üõë Stop Î™ÖÎ†π Ïã§Ìñâ")
    Motor.MotorStop(0)
    Motor.MotorStop(1)

    time.sleep(3)

    # ÏãúÎÇòÎ¶¨Ïò§ 6 : Î¨ºÍ±¥ Ï†ÅÏ†ú ÌõÑ ÌöåÏ†Ñ
    print("üì¶ Î°úÎî© Ï§ë")
    time.sleep(10)

    print("‚û°Ô∏è Turn Right Ïã§Ìñâ")
    Motor.MotorRun(0, 'forward', 50)
    Motor.MotorRun(1, 'backward', 50)

    time.sleep(1.5)

    print("üõë Stop Î™ÖÎ†π Ïã§Ìñâ")
    Motor.MotorStop(0)
    Motor.MotorStop(1)

    time.sleep(3)

    start_time_4 = time.time()

    # ÏãúÎÇòÎ¶¨Ïò§ 7 : Ïû•Ïï†Î¨º Î∞úÍ≤¨
    print("üöÄ Start Î™ÖÎ†π Ïã§Ìñâ")
    while ( cap.isOpened() ):
        ret, frame = cap.read()
        cv2.imshow(frame)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (5,5), 0)
        ret, thresh1 = cv2.threshold(blur, 123, 255, cv2.THRESH_BINARY)

        mask = cv2.erode(thresh1, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)
        cv2.imshow('mask',mask)

        contours,hierarchy = cv2.findContours(mask.copy(), 1, cv2.CHAIN_APPROX_NONE)

        if len(contours) > 0:
            c = max(contours, key=cv2.contourArea)
            M = cv2.moments(c)

            cx = int(M['m10']/M['m00'])
            cy = int(M['m01']/M['m00'])

            print(cx)

            if cx > frame.shape[1]:
                Motor.MotorRun(0, 'forward', 45)
                Motor.MotorRun(1, 'forward', 50)
            
            elif cx < frame.shape[1]:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 45)
            
            else:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 50)
            
            if time.time() - start_time_4 > 2:
                break

    print("‚ö†Ô∏è Ïû•Ïï†Î¨º Í∞êÏßÄ - Ï†ïÏßÄ")
    Motor.MotorStop(0)
    Motor.MotorStop(1)

    time.sleep(5)

    start_time_5 = time.time()
    
    # ÏãúÎÇòÎ¶¨Ïò§Ïò§ 8 : Îã§Ïãú Ï£ºÌñâ ÌõÑ ÌöåÏ†ÑÏ†Ñ
    print("Ïû•Ïï†Î¨º Ï†úÍ±∞ !! üöÄ Start Î™ÖÎ†π Ïã§Ìñâ")
    while ( cap.isOpened() ):
        ret, frame = cap.read()
        cv2.imshow(frame)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (5,5), 0)
        ret, thresh1 = cv2.threshold(blur, 123, 255, cv2.THRESH_BINARY)

        mask = cv2.erode(thresh1, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)
        cv2.imshow('mask',mask)

        contours,hierarchy = cv2.findContours(mask.copy(), 1, cv2.CHAIN_APPROX_NONE)

        if len(contours) > 0:
            c = max(contours, key=cv2.contourArea)
            M = cv2.moments(c)

            cx = int(M['m10']/M['m00'])
            cy = int(M['m01']/M['m00'])

            print(cx)

            if cx > frame.shape[1]:
                Motor.MotorRun(0, 'forward', 45)
                Motor.MotorRun(1, 'forward', 50)
            
            elif cx < frame.shape[1]:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 45)
            
            else:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 50)
            
            if time.time() - start_time_5 > 2:
                break

    print("üõë Stop Î™ÖÎ†π Ïã§Ìñâ")
    Motor.MotorStop(0)
    Motor.MotorStop(1)

    time.sleep(3)

    print("‚¨ÖÔ∏è Turn Left Ïã§Ìñâ")
    Motor.MotorRun(0, 'backward', 50)
    Motor.MotorRun(1, 'forward', 50)

    time.sleep(1.5)

    Motor.MotorStop(0)
    Motor.MotorStop(1)

    time.sleep(3)

    start_time_6 = time.time()

    # ÏãúÎÇòÎ¶¨Ïò§ 9 : 200cm Ïù¥Îèô
    print("üöÄ Start Î™ÖÎ†π Ïã§Ìñâ")
    while ( cap.isOpened() ):
        ret, frame = cap.read()
        cv2.imshow(frame)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        blur = cv2.GaussianBlur(gray, (5,5), 0)
        ret, thresh1 = cv2.threshold(blur, 123, 255, cv2.THRESH_BINARY)

        mask = cv2.erode(thresh1, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)
        cv2.imshow('mask',mask)

        contours,hierarchy = cv2.findContours(mask.copy(), 1, cv2.CHAIN_APPROX_NONE)

        if len(contours) > 0:
            c = max(contours, key=cv2.contourArea)
            M = cv2.moments(c)

            cx = int(M['m10']/M['m00'])
            cy = int(M['m01']/M['m00'])

            print(cx)

            if cx > frame.shape[1]:
                Motor.MotorRun(0, 'forward', 45)
                Motor.MotorRun(1, 'forward', 50)
            
            elif cx < frame.shape[1]:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 45)
            
            else:
                Motor.MotorRun(0, 'forward', 50)
                Motor.MotorRun(1, 'forward', 50)
            
            if time.time() - start_time_6 > 6:
                break

    # ÏãúÎÇòÎ¶¨Ïò§ 9 : Ïñ∏Î°úÎî©
    print("ÏúÑÏπò ÎèÑÏ∞©!! üõë Stop Î™ÖÎ†π Ïã§Ìñâ")
    Motor.MotorStop(0)
    Motor.MotorStop(1)

    time.sleep(10)

    print("üì¶ Ïñ∏Î°úÎî© ÏôÑÎ£å")


    while(1):
        time.sleep(1)

except IOError as e:
    print(e)
    
except KeyboardInterrupt:    
    print("\r\nctrl + c:")
    Motor.MotorRun(0, 'forward', 0)
    Motor.MotorRun(1, 'backward', 0)
    exit()


